buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = "1.3.2"
group = "cn.yesterday17.kokoalinux"
archivesBaseName = "kokoalinux"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    mappings = "stable_39"

    replace '@VERSION@', project.version
}

jar {
    manifest {
        attributes([
                "TweakClass": "cn.yesterday17.kokoalinux.tweaker.KokoaTweaker",
        ])
    }

    from('libkokoa') {
        include 'libkokoa.so' into 'linux-x86-64'
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task buildLibKokoa() {
    def build = "libkokoa/build.sh".execute()
    build.waitForProcessOutput(System.out, System.err)

    def clean = "libkokoa/clean.sh".execute()
    clean.waitForProcessOutput(System.out, System.err)
}

build {
    doFirst {
        buildLibKokoa
    }
}

task preDebugRun() {
    buildLibKokoa

    def mkdir = "mkdir -p ./build/classes/java/main/linux-x86-64".execute()
    mkdir.waitForProcessOutput(System.out, System.err)

    def mv = "mv ./libkokoa/libkokoa.so ./build/classes/java/main/linux-x86-64/".execute()
    mv.waitForProcessOutput(System.out, System.err)
}

ext.programParameters = [
        "--tweakClass cn.yesterday17.kokoalinux.tweaker.KokoaTweaker"
]

idea.workspace.iws.withXml {
    def runManager = it.asNode().component.find({ it.@name == 'RunManager' })
    runManager.configuration.findAll({ it.@type == 'Application' }).each {
        def mainClass = it.option.find({ it.@name == 'MAIN_CLASS_NAME' }).@value
        if (mainClass == 'GradleStart') {
            // Client-only mod
            def paramArg = String.join(' ', programParameters)
            it.option.find({ it.@name == 'PROGRAM_PARAMETERS' }).@value = paramArg
        }
    }
}
